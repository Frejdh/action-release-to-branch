name: Maven build and test
description: Action for building and testing maven repositories

inputs:

  github-token:
    description: Either use `secrets.GITHUB_TOKEN` for the same repository. Or for other repositories, use a personal access token.
    required: true
    default: ''

  java-version:
    description: JDK version to use. Default is '21'.
    required: false
    default: '21'

  java-distribution:
    description: JDK distribution to use. Default is 'temurin'.
    required: false
    default: 'temurin'

  cache-id:
    description: ID (subkey) for the cache
    required: false
    default: 'v1'

  build-arguments:
    description: Arguments for the maven build. Default 'mvn -B install -e [CUSTOM ARGS]'
    required: false

  project-framework:
    description: Select what kind of framework the project uses
    default: Maven
#    options:
#      - Maven
#      - Gradle
#      - NPM
#      - PyPi

  commitish:
    description: Git reference (branch/commit) to trigger the build on
    required: false

  release-branch-repository:
    description: If release branch is enabled, this will change the repository to be used. Default is the current repository
    required: false
    default: ''

  release-branch-name-maven:
    description: Release branch name for Maven artifacts
    required: false

  release-branch-name-gradle:
    description: Release branch name for Gradle artifacts
    required: false

  release-branch-name-npm:
    description: Release branch name for NPM (Node) packages
    required: false

  release-branch-name-pypi:
    description: Release branch name for Python PIP packages
    required: false

  create-tag-enabled:
    description: Whether tags should be created (in the originating repository). The tag name will be the first found artifact's/package's version
    required: false
    default: 'false'
#    type: boolean

  create-tag-pattern:
    description: Which pattern that should generate tags. Set to empty string or '.*' to match everything. By default, match everything not ending with -SNAPSHOT. JavaScript regex syntax
    required: false
    default: '^(?!.+(-SNAPSHOT)$).+$'

  create-tag-allow-override:
    description: Whether the tags created can override existing ones. Equivalent to 'git push --force <tag>'
    required: false
    default: 'false'
#    type: boolean


runs:
  using: composite
  steps:
    - name: Prepare environment
      shell: bash
      run: |
        echo "LOCAL_REPOSITORY_DIR=~/local-repository" >> $GITHUB_ENV
        echo "APP_REPO_DIR=application-repo" >> $GITHUB_ENV
        echo "RELEASE_REPO_DIR=release-repo" >> $GITHUB_ENV
        echo PROJECT_FRAMEWORK="$(echo "${{ inputs.project-framework }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        cat "$GITHUB_ENV"

        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

        if [ -z "${{ inputs.github-token }}" ]; then
          echo "Error: github-token input is required and must not be empty."
          exit 1
        fi

    - name: Checkout branch code
      uses: actions/checkout@v5
      with:
        path: "${{ env.APP_REPO_DIR }}"
        ref: "${{ inputs.commitish }}"
        token: "${{ inputs.github-token }}"
        persist-credentials: true
        fetch-depth: 0

    - name: Set up JDK ${{ inputs.java-version }} (${{ inputs.java-distribution }})
      uses: actions/setup-java@v3
      with:
        java-version: ${{ inputs.java-version }}
        distribution: ${{ inputs.java-distribution }}

    - name: Set up cache for Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: maven-${{ inputs.cache-id }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          maven-

    - name: Build Maven project and install artifact
      if: env.PROJECT_FRAMEWORK == 'maven'
      shell: bash
      working-directory: ./${{ env.APP_REPO_DIR }}
      run: |
        mkdir -p "${{ env.LOCAL_REPOSITORY_DIR }}"
        echo "DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')" >> $GITHUB_ENV
        mvn -B install source:jar javadoc:jar install -Dencoding="UTF-8" -DcreateChecksum=true -DadditionalJOption="-Xdoclint:none" -e ${{ inputs.build-arguments }}

    - name: Checkout repository to release on
      uses: actions/checkout@v5
      with:
        path: "${{ env.RELEASE_REPO_DIR }}"
        token: "${{ inputs.github-token }}"
        repository: "${{ inputs.release-branch-repository }}"
        persist-credentials: true
        fetch-depth: 0

    - name: Determine release branch
      uses: actions/github-script@v8
      env:
        projectFramework: "${{ inputs.project-framework }}"
        mavenBranch: "${{ inputs.release-branch-name-maven }}"
        gradleBranch: "${{ inputs.release-branch-name-gradle }}"
        npmBranch: "${{ inputs.release-branch-name-npm }}"
        pypiBranch: "${{ inputs.release-branch-name-pypi }}"
      with:
        script: |
          const { default: script } = await import("${{ github.action_path }}/src/detect-release-branch.js");
          await script();

    - name: Switch to release branch and create if missing
      shell: bash
      working-directory: ./${{ env.RELEASE_REPO_DIR }}
      run: |
        RELEASE_BRANCH_CREATED=false

        git fetch --all
        if git ls-remote --exit-code --heads origin "${{ env.RELEASE_BRANCH }}" >/dev/null 2>&1; then
          echo "The branch [${{ env.RELEASE_BRANCH }}] was found"
          git checkout "${{ env.RELEASE_BRANCH }}"
        else
          echo "The branch [${{ env.RELEASE_BRANCH }}] doesn't exist. Creating new branch and pushing to remote"
          RELEASE_BRANCH_CREATED=true
          git switch --orphan "${{ env.RELEASE_BRANCH }}"
          git clean -fd
          git commit --allow-empty -m "Initial commit on release branch"
        fi
        echo "RELEASE_BRANCH_CREATED=$RELEASE_BRANCH_CREATED" >> $GITHUB_ENV

    - name: Push new release branch to remote
      if: env.RELEASE_BRANCH_CREATED == 'true'
      uses: ad-m/github-push-action@v0.8.0
      with:
        repository: "${{ inputs.release-branch-repository }}"
        branch: "${{ env.RELEASE_BRANCH }}"
        github_token: "${{ inputs.github-token }}"
        directory: "${{ env.RELEASE_REPO_DIR }}"

    - name: Copy artifacts to branch
      uses: actions/github-script@v8
      env:
        projectFramework: "${{ inputs.project-framework }}"
        workingDirectory: "${{ env.RELEASE_REPO_DIR }}"
        appDirectory: "${{ env.APP_REPO_DIR }}"
        releaseDirectory: "${{ env.RELEASE_REPO_DIR }}"
        defaultBranch: "${{ env.DEFAULT_BRANCH }}"
        releaseBranch: "${{ env.RELEASE_BRANCH }}"
      with:
        script: |
          const { default: script } = await import("${{ github.action_path }}/src/find-and-copy-artifacts.js");
          await script();

    - name: Create release commit
      shell: bash
      working-directory: ./${{ env.RELEASE_REPO_DIR }}
      run: |
        git add .
        git commit --allow-empty -m "New release build [${{ env.RELEASE_VERSION }}] for ${{ github.repository }}"

    - name: Debug Token and Remote
      shell: bash
      working-directory: ./${{ env.RELEASE_REPO_DIR }}
      run: |
        git config --get remote.origin.url
        git config --get user.name
        git config --get user.email
        echo "${{ inputs.github-token }}" | wc -c

    - name: Push to release branch
      uses: ad-m/github-push-action@v0.8.0
      with:
        repository: "${{ inputs.release-branch-repository }}"
        branch: "${{ env.RELEASE_BRANCH }}"
        github_token: "${{ inputs.github-token }}"
        directory: "${{ env.RELEASE_REPO_DIR }}"

    - name: Check if tag shall be created
      if: inputs.create-tag-enabled == 'true'
      uses: actions/github-script@v8
      env:
        workingDirectory: "${{ env.APP_REPO_DIR }}"
        defaultBranch: "${{ env.DEFAULT_BRANCH }}"
        releaseVersion: "${{ env.RELEASE_VERSION }}"
        allowedTagPattern: "${{ inputs.create-tag-pattern }}"
        pushWithForce: "${{ inputs.create-tag-allow-override }}"
      with:
        script: |
          const { default: script } = await import("${{ github.action_path }}/src/create-and-push-tag.js");
          await script();
